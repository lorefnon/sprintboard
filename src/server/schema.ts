/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { sprintTags as sprintTagsResolver, taskAssignees as taskAssigneesResolver, taskTags as taskTagsResolver, sprintTasks as sprintTasksResolver, latestSprint as queryLatestSprintResolver, sprints as querySprintsResolver, tags as queryTagsResolver, tasks as queryTasksResolver, addAssignee as mutationAddAssigneeResolver, assignTagToSprint as mutationAssignTagToSprintResolver, assignTagToTask as mutationAssignTagToTaskResolver, assignTaskToSprint as mutationAssignTaskToSprintResolver, completeTask as mutationCompleteTaskResolver, createAppUser as mutationCreateAppUserResolver, createSprint as mutationCreateSprintResolver, createTag as mutationCreateTagResolver, createTask as mutationCreateTaskResolver, removeAssignee as mutationRemoveAssigneeResolver, removeSprintTag as mutationRemoveSprintTagResolver, removeTaskTag as mutationRemoveTaskTagResolver, startTask as mutationStartTaskResolver } from "./resolvers.js";
import { GraphQLSchema, GraphQLObjectType, GraphQLScalarType, GraphQLString, GraphQLList, GraphQLNonNull, GraphQLInt, GraphQLInputObjectType, GraphQLBoolean } from "graphql";
export function getSchema(): GraphQLSchema {
    const DateType: GraphQLScalarType = new GraphQLScalarType({
        name: "Date"
    });
    const TagType: GraphQLObjectType = new GraphQLObjectType({
        name: "Tag",
        fields() {
            return {
                id: {
                    name: "id",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const TagsPageType: GraphQLObjectType = new GraphQLObjectType({
        name: "TagsPage",
        fields() {
            return {
                items: {
                    name: "items",
                    type: new GraphQLList(new GraphQLNonNull(TagType))
                }
            };
        }
    });
    const AppUserType: GraphQLObjectType = new GraphQLObjectType({
        name: "AppUser",
        fields() {
            return {
                email: {
                    name: "email",
                    type: GraphQLString
                },
                id: {
                    name: "id",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const AppUsersPageType: GraphQLObjectType = new GraphQLObjectType({
        name: "AppUsersPage",
        fields() {
            return {
                items: {
                    name: "items",
                    type: new GraphQLList(new GraphQLNonNull(AppUserType))
                }
            };
        }
    });
    const TaskType: GraphQLObjectType = new GraphQLObjectType({
        name: "Task",
        fields() {
            return {
                assignees: {
                    name: "assignees",
                    type: AppUsersPageType,
                    resolve(source) {
                        return taskAssigneesResolver(source);
                    }
                },
                createTs: {
                    name: "createTs",
                    type: DateType
                },
                endTs: {
                    name: "endTs",
                    type: DateType
                },
                expectedEndTs: {
                    name: "expectedEndTs",
                    type: DateType
                },
                id: {
                    name: "id",
                    type: GraphQLString
                },
                startTs: {
                    name: "startTs",
                    type: DateType
                },
                tags: {
                    name: "tags",
                    type: TagsPageType,
                    resolve(source) {
                        return taskTagsResolver(source);
                    }
                },
                title: {
                    name: "title",
                    type: GraphQLString
                },
                updateTs: {
                    name: "updateTs",
                    type: DateType
                }
            };
        }
    });
    const PageType: GraphQLObjectType = new GraphQLObjectType({
        name: "Page",
        fields() {
            return {
                num: {
                    name: "num",
                    type: GraphQLInt
                },
                size: {
                    name: "size",
                    type: GraphQLInt
                },
                total: {
                    name: "total",
                    type: GraphQLString
                }
            };
        }
    });
    const TasksPageType: GraphQLObjectType = new GraphQLObjectType({
        name: "TasksPage",
        fields() {
            return {
                items: {
                    name: "items",
                    type: new GraphQLList(new GraphQLNonNull(TaskType))
                },
                page: {
                    name: "page",
                    type: PageType
                }
            };
        }
    });
    const PageInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "PageInput",
        fields() {
            return {
                num: {
                    name: "num",
                    type: GraphQLInt
                },
                size: {
                    name: "size",
                    type: GraphQLInt
                }
            };
        }
    });
    const SprintType: GraphQLObjectType = new GraphQLObjectType({
        name: "Sprint",
        fields() {
            return {
                createTs: {
                    name: "createTs",
                    type: DateType
                },
                id: {
                    name: "id",
                    type: GraphQLString
                },
                startTs: {
                    name: "startTs",
                    type: DateType
                },
                tags: {
                    name: "tags",
                    type: TagsPageType,
                    resolve(source) {
                        return sprintTagsResolver(source);
                    }
                },
                tasks: {
                    name: "tasks",
                    type: TasksPageType,
                    args: {
                        page: {
                            type: new GraphQLNonNull(PageInputType)
                        }
                    },
                    resolve(source, args) {
                        return sprintTasksResolver(source, args.page);
                    }
                },
                title: {
                    name: "title",
                    type: GraphQLString
                },
                updateTs: {
                    name: "updateTs",
                    type: DateType
                }
            };
        }
    });
    const SprintsPageType: GraphQLObjectType = new GraphQLObjectType({
        name: "SprintsPage",
        fields() {
            return {
                items: {
                    name: "items",
                    type: new GraphQLList(new GraphQLNonNull(SprintType))
                },
                page: {
                    name: "page",
                    type: PageType
                }
            };
        }
    });
    const SprintFiltersInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "SprintFiltersInput",
        fields() {
            return {
                tagIds: {
                    name: "tagIds",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                }
            };
        }
    });
    const TaskFiltersInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "TaskFiltersInput",
        fields() {
            return {
                assigneeIds: {
                    name: "assigneeIds",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                },
                sprintId: {
                    name: "sprintId",
                    type: GraphQLString
                },
                tagIds: {
                    name: "tagIds",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                latestSprint: {
                    name: "latestSprint",
                    type: SprintType,
                    resolve() {
                        return queryLatestSprintResolver();
                    }
                },
                sprints: {
                    name: "sprints",
                    type: SprintsPageType,
                    args: {
                        filters: {
                            type: new GraphQLNonNull(SprintFiltersInputType)
                        },
                        page: {
                            type: new GraphQLNonNull(PageInputType)
                        }
                    },
                    resolve(_source, args) {
                        return querySprintsResolver(args.filters, args.page);
                    }
                },
                tags: {
                    name: "tags",
                    type: TagsPageType,
                    resolve() {
                        return queryTagsResolver();
                    }
                },
                tasks: {
                    name: "tasks",
                    type: TasksPageType,
                    args: {
                        filters: {
                            type: new GraphQLNonNull(TaskFiltersInputType)
                        },
                        page: {
                            type: new GraphQLNonNull(PageInputType)
                        }
                    },
                    resolve(_source, args) {
                        return queryTasksResolver(args.filters, args.page);
                    }
                }
            };
        }
    });
    const ResultType: GraphQLObjectType = new GraphQLObjectType({
        name: "Result",
        fields() {
            return {
                success: {
                    name: "success",
                    type: GraphQLBoolean
                }
            };
        }
    });
    const AppUserInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "AppUserInput",
        fields() {
            return {
                email: {
                    name: "email",
                    type: new GraphQLNonNull(GraphQLString)
                },
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const SprintInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "SprintInput",
        fields() {
            return {
                startTS: {
                    name: "startTS",
                    type: new GraphQLNonNull(DateType)
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const TagInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "TagInput",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const TaskInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "TaskInput",
        fields() {
            return {
                expectedEndTs: {
                    name: "expectedEndTs",
                    type: DateType
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                addAssignee: {
                    name: "addAssignee",
                    type: ResultType,
                    args: {
                        assigneeId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationAddAssigneeResolver(args.taskId, args.assigneeId);
                    }
                },
                assignTagToSprint: {
                    name: "assignTagToSprint",
                    type: ResultType,
                    args: {
                        sprintId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        tagId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationAssignTagToSprintResolver(args.sprintId, args.tagId);
                    }
                },
                assignTagToTask: {
                    name: "assignTagToTask",
                    type: ResultType,
                    args: {
                        tagId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationAssignTagToTaskResolver(args.taskId, args.tagId);
                    }
                },
                assignTaskToSprint: {
                    name: "assignTaskToSprint",
                    type: ResultType,
                    args: {
                        sprintId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationAssignTaskToSprintResolver(args.taskId, args.sprintId);
                    }
                },
                completeTask: {
                    name: "completeTask",
                    type: ResultType,
                    args: {
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCompleteTaskResolver(args.taskId);
                    }
                },
                createAppUser: {
                    name: "createAppUser",
                    type: AppUserType,
                    args: {
                        appUser: {
                            type: new GraphQLNonNull(AppUserInputType)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCreateAppUserResolver(args.appUser);
                    }
                },
                createSprint: {
                    name: "createSprint",
                    type: SprintType,
                    args: {
                        sprint: {
                            type: new GraphQLNonNull(SprintInputType)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCreateSprintResolver(args.sprint);
                    }
                },
                createTag: {
                    name: "createTag",
                    type: TagType,
                    args: {
                        tag: {
                            type: new GraphQLNonNull(TagInputType)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCreateTagResolver(args.tag);
                    }
                },
                createTask: {
                    name: "createTask",
                    type: TaskType,
                    args: {
                        task: {
                            type: new GraphQLNonNull(TaskInputType)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCreateTaskResolver(args.task);
                    }
                },
                removeAssignee: {
                    name: "removeAssignee",
                    type: ResultType,
                    args: {
                        assigneeId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationRemoveAssigneeResolver(args.taskId, args.assigneeId);
                    }
                },
                removeSprintTag: {
                    name: "removeSprintTag",
                    type: ResultType,
                    args: {
                        sprintId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        tagId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationRemoveSprintTagResolver(args.sprintId, args.tagId);
                    }
                },
                removeTaskTag: {
                    name: "removeTaskTag",
                    type: ResultType,
                    args: {
                        tagId: {
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationRemoveTaskTagResolver(args.taskId, args.tagId);
                    }
                },
                startTask: {
                    name: "startTask",
                    type: ResultType,
                    args: {
                        taskId: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return mutationStartTaskResolver(args.taskId);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [DateType, AppUserInputType, PageInputType, SprintFiltersInputType, SprintInputType, TagInputType, TaskFiltersInputType, TaskInputType, AppUserType, AppUsersPageType, MutationType, PageType, QueryType, ResultType, SprintType, SprintsPageType, TagType, TagsPageType, TaskType, TasksPageType]
    });
}
