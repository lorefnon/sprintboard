scalar Date

input AppUserInput {
  email: String!
  name: String!
}

input PageInput {
  num: Int
  size: Int
}

input SprintFiltersInput {
  tagIds: [String!]
}

input SprintInput {
  startTS: Date!
  title: String!
}

input TagInput {
  name: String!
}

input TaskFiltersInput {
  assigneeIds: [String!]
  sprintId: String
  tagIds: [String!]
}

input TaskInput {
  expectedEndTs: Date
  title: String!
}

type AppUser {
  email: String
  id: String
  name: String
}

type AppUsersPage {
  items: [AppUser!]
}

type Mutation {
  addAssignee(assigneeId: String!, taskId: String!): Result
  assignTagToSprint(sprintId: String!, tagId: String!): Result
  assignTagToTask(tagId: String!, taskId: String!): Result
  assignTaskToSprint(sprintId: String!, taskId: String!): Result
  completeTask(taskId: String!): Result
  createAppUser(appUser: AppUserInput!): AppUser
  createSprint(sprint: SprintInput!): Sprint
  createTag(tag: TagInput!): Tag
  createTask(task: TaskInput!): Task
  removeAssignee(assigneeId: String!, taskId: String!): Result
  removeSprintTag(sprintId: String!, tagId: String!): Result
  removeTaskTag(tagId: String!, taskId: String!): Result
  startTask(taskId: String!): Result
}

type Page {
  num: Int
  size: Int
  total: String
}

type Query {
  latestSprint: Sprint
  sprints(filters: SprintFiltersInput!, page: PageInput!): SprintsPage
  tags: TagsPage
  tasks(filters: TaskFiltersInput!, page: PageInput!): TasksPage
}

type Result {
  success: Boolean
}

type Sprint {
  createTs: Date
  id: String
  startTs: Date
  tags: TagsPage
  tasks(page: PageInput!): TasksPage
  title: String
  updateTs: Date
}

type SprintsPage {
  items: [Sprint!]
  page: Page
}

type Tag {
  id: String
  name: String
}

type TagsPage {
  items: [Tag!]
}

type Task {
  assignees: AppUsersPage
  createTs: Date
  endTs: Date
  expectedEndTs: Date
  id: String
  startTs: Date
  tags: TagsPage
  title: String
  updateTs: Date
}

type TasksPage {
  items: [Task!]
  page: Page
}